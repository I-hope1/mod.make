plugins {
	id 'java'
	id "io.github.liplum.mgpp" version "1.3.2"
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	targetCompatibility = 9
	sourceCompatibility = 9
//	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED")
//	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.reflect=ALL-UNNAMED")
//	options.compilerArgs.addAll("--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED")
}

sourceSets.main.java.srcDirs = ["src"]
repositories {
	mavenLocal()
	maven { url 'https://www.jitpack.io' }
	mavenCentral()
	maven { url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository' }
}
//force arc version
configurations.configureEach {
	resolutionStrategy.eachDependency { details ->
		if (details.requested.group == 'com.github.Anuken.Arc') details.useVersion "$mindustryVersion"
	}
}

dependencies {
	annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"
	compileOnly("com.github.anuken.arc:arc-core:$mindustryVersion") {
		exclude module: "flabel"
	}
	compileOnly "com.github.Tinylake:MindustryX:v146.004"
//	compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
}


mindustry {
	meta << ModMeta(
			version: VERSION
	)
	meta.displayName = "mod-make"
	def name = project.archivesBaseName
	deploy {
		baseName = name
	}
	dexJar {
//		options.minApi = '26'
	}

	run {
		keepOtherMods
//		setDataDefault()
		dataDir = MdtDataDir
	}
}
mindustryAssets {
	// Set the assets root
	rootAt "$projectDir/assets"
}
test {
	useJUnitPlatform()
}

import arc.files.Fi

task playGame(dependsOn: classes, type: JavaExec) {
	dependsOn jar
	doFirst {
		def modFi = project.archivesBaseName + "-" + VERSION + ".jar"
		def buildDir = new Fi("" + buildDir).child("libs")
		def from = buildDir.child(project.archivesBaseName + ".jar");
		if (from.exists()) from.copyTo(buildDir.child(modFi))
		buildDir.child(modFi).copyTo(new Fi(MdtDataDir).child("mods").child(modFi))
	}
	//运行游戏目录
	def gameFile = new File(MdtDataDir + "/Mindustry.jar")
	classpath(gameFile)
	args = [
			/*,"-debug"*/
	]
}
task ZCompileAll {
	dependsOn deploy
}

task mergeLibs(type: Jar) {
	archiveFileName = "$rootDir/assets/libs/lib.jar"

	def libBuild = new File("$rootDir/libs/build")

	from(zipTree("$libBuild/tmp/deploy/libs-1.1.jar")) {
		exclude "classes.dex"
		exclude "mod.hjson"
		exclude "META-INF/META-INF.MF"
	}
	from(zipTree("$libBuild/tmp/dexJar/dexed.bak.jar")) {
		include "**"
	}
}

task playAndroid {
	dependsOn deploy

	def adb = "F:/files/java/sdk/platform-tools/adb"
	def MDT_ANDROID_DIR = "/storage/emulated/0/Android/data/io.anuke.mindustry/files"

	def buildDir = buildDir
	def fileName = "${archivesBaseName}.jar"
	doLast {
		("$adb push $buildDir/libs/$fileName $MDT_ANDROID_DIR/mods/")
				.execute().waitForProcessOutput(System.out, System.err)

		"$adb push $project.rootDir/appendLog.sh $MDT_ANDROID_DIR/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -W -S"
				.execute().waitForProcessOutput(System.out, System.err)
		Thread.sleep(100)
		"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
	}
}
