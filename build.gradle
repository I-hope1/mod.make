plugins {
	id 'java'
	id "io.github.liplum.mgpp" version "1.2.0"
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
//	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED")
//	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.reflect=ALL-UNNAMED")
//	options.compilerArgs.addAll("--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED")
}

group 'org.example'
version '1.0'
sourceSets {
	main {
		java.srcDirs = ["src"]
	}
}
targetCompatibility = 9
sourceCompatibility = 9
repositories {
	mavenCentral()
	mindustryRepo()
}

def MdtDataDir = "E:/Users/ASUS/Desktop/Mindustry136"
def VERSION = "1.4.1"

dependencies {
	def uncVersion = "1.8.9"
	annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"
	def mindustryVersion = 'v146'
	compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
	compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
}
mindustry {
	client {
		official version: 'v139'
		fromLocal "E:/Users/ASUS/Desktop/Mindustry136/Mindustry.jar"
		args += ['-debug']
	}
	meta << ModMeta(
			version: VERSION
	)
	meta.displayName = "mod-make"
	def name = project.archivesBaseName
	deploy {
		baseName = name
	}
	dexJar {
//		options.minApi = '26'
	}

	run {
		keepOtherMods
//		setDataDefault()
		dataDir = "E:/Users/ASUS/Desktop/Mindustry136"
	}
}
mindustryAssets {
	// Set the assets root
	rootAt "$projectDir/assets"
}
test {
	useJUnitPlatform()
}

import arc.files.Fi;

task playGame(dependsOn: classes, type: JavaExec) {
	dependsOn jar
	doFirst {
		def modFi = project.archivesBaseName + "-" + VERSION + ".jar"
		def buildDir = new Fi("" + buildDir).child("libs")
		def from = buildDir.child(project.archivesBaseName + "-1.0.jar");
		if (from.exists()) from.moveTo(buildDir.child(modFi))
		buildDir.child(modFi).copyTo(new Fi(MdtDataDir).child("mods").child(modFi))
	}
	//运行游戏目录
	def gameFile = new File(MdtDataDir + "/Mindustry.jar")
	main = "-jar"
	args = [
			gameFile.path
			/*,"-debug"*/
	]
}
task ZComplieAll {
	dependsOn deploy
}

task mergeLibs(type: Jar) {
	archiveFileName = "$rootDir/assets/libs/lib.jar"

	def libBuild = new File("$rootDir/libs/build")

	from(zipTree("$libBuild/tmp/deploy/libs-1.1.jar")) {
		exclude "classes.dex"
		exclude "mod.hjson"
		exclude "META-INF/META-INF.MF"
	}
	from(zipTree("$libBuild/tmp/dexJar/dexed.bak.jar")) {
		include "**"
	}
}
//build.dependsOn(mergeLibs)
